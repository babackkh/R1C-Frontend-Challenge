/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * RealWorld Conduit API
 * Conduit API documentation
 * OpenAPI spec version: 1.0.0
 */
import type { HttpClient } from "@angular/common/http";
import type { HttpResponse as AngularHttpResponse, HttpContext, HttpEvent, HttpHeaders, HttpParams } from "@angular/common/http";

import { Injectable } from "@angular/core";

import type { Observable } from "rxjs";

import type { LoginUserRequestBody, NewUserRequestBody, UpdateUserRequestBody, UserResponseResponse } from "../../model";

type HttpClientOptions = {
	headers?:
		| HttpHeaders
		| {
				[header: string]: string | string[];
		  };
	context?: HttpContext;
	observe?: any;
	params?:
		| HttpParams
		| {
				[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
		  };
	reportProgress?: boolean;
	responseType?: any;
	withCredentials?: boolean;
};

@Injectable({ providedIn: "root" })
export class UserAndAuthenticationService {
	constructor(private http: HttpClient) {} /**
	 * Login for existing user
	 * @summary Existing user login
	 */
	login<TData = UserResponseResponse>(
		loginUserRequestBody: LoginUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	login<TData = UserResponseResponse>(
		loginUserRequestBody: LoginUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	login<TData = UserResponseResponse>(
		loginUserRequestBody: LoginUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	login<TData = UserResponseResponse>(loginUserRequestBody: LoginUserRequestBody, options?: HttpClientOptions): Observable<TData> {
		return this.http.post<TData>(`/users/login`, loginUserRequestBody, options);
	}
	/**
	 * Register a new user
	 */
	createUser<TData = UserResponseResponse>(
		newUserRequestBody: NewUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	createUser<TData = UserResponseResponse>(
		newUserRequestBody: NewUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	createUser<TData = UserResponseResponse>(
		newUserRequestBody: NewUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	createUser<TData = UserResponseResponse>(newUserRequestBody: NewUserRequestBody, options?: HttpClientOptions): Observable<TData> {
		return this.http.post<TData>(`/users`, newUserRequestBody, options);
	}
	/**
	 * Gets the currently logged-in user
	 * @summary Get current user
	 */
	getCurrentUser<TData = UserResponseResponse>(options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" }): Observable<TData>;
	getCurrentUser<TData = UserResponseResponse>(
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getCurrentUser<TData = UserResponseResponse>(
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getCurrentUser<TData = UserResponseResponse>(options?: HttpClientOptions): Observable<TData> {
		return this.http.get<TData>(`/user`, options);
	}
	/**
	 * Updated user information for current user
	 * @summary Update current user
	 */
	updateCurrentUser<TData = UserResponseResponse>(
		updateUserRequestBody: UpdateUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	updateCurrentUser<TData = UserResponseResponse>(
		updateUserRequestBody: UpdateUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	updateCurrentUser<TData = UserResponseResponse>(
		updateUserRequestBody: UpdateUserRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	updateCurrentUser<TData = UserResponseResponse>(
		updateUserRequestBody: UpdateUserRequestBody,
		options?: HttpClientOptions,
	): Observable<TData> {
		return this.http.put<TData>(`/user`, updateUserRequestBody, options);
	}
}

export type LoginClientResult = NonNullable<UserResponseResponse>;
export type CreateUserClientResult = NonNullable<UserResponseResponse>;
export type GetCurrentUserClientResult = NonNullable<UserResponseResponse>;
export type UpdateCurrentUserClientResult = NonNullable<UserResponseResponse>;
