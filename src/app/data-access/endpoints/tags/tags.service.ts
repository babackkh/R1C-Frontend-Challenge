/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * RealWorld Conduit API
 * Conduit API documentation
 * OpenAPI spec version: 1.0.0
 */
import type { HttpClient } from "@angular/common/http";
import type { HttpResponse as AngularHttpResponse, HttpContext, HttpEvent, HttpHeaders, HttpParams } from "@angular/common/http";

import { Injectable } from "@angular/core";

import type { Observable } from "rxjs";

import type { TagsResponseResponse } from "../../model";

type HttpClientOptions = {
	headers?:
		| HttpHeaders
		| {
				[header: string]: string | string[];
		  };
	context?: HttpContext;
	observe?: any;
	params?:
		| HttpParams
		| {
				[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
		  };
	reportProgress?: boolean;
	responseType?: any;
	withCredentials?: boolean;
};

@Injectable({ providedIn: "root" })
export class TagsService {
	constructor(private http: HttpClient) {} /**
	 * Get tags. Auth not required
	 * @summary Get tags
	 */
	getTags<TData = TagsResponseResponse>(options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" }): Observable<TData>;
	getTags<TData = TagsResponseResponse>(
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getTags<TData = TagsResponseResponse>(
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getTags<TData = TagsResponseResponse>(options?: HttpClientOptions): Observable<TData> {
		return this.http.get<TData>(`/tags`, options);
	}
}

export type GetTagsClientResult = NonNullable<TagsResponseResponse>;
