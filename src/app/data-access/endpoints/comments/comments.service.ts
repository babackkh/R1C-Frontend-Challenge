/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * RealWorld Conduit API
 * Conduit API documentation
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from "@angular/common/http";
import type { HttpResponse as AngularHttpResponse, HttpContext, HttpEvent, HttpHeaders, HttpParams } from "@angular/common/http";

import { Injectable } from "@angular/core";

import type { Observable } from "rxjs";

import type {
	EmptyOkResponseResponse,
	MultipleCommentsResponseResponse,
	NewCommentRequestBody,
	SingleCommentResponseResponse,
} from "../../model";

type HttpClientOptions = {
	headers?:
		| HttpHeaders
		| {
				[header: string]: string | string[];
		  };
	context?: HttpContext;
	observe?: any;
	params?:
		| HttpParams
		| {
				[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
		  };
	reportProgress?: boolean;
	responseType?: any;
	withCredentials?: boolean;
};

@Injectable({ providedIn: "root" })
export class CommentsService {
	constructor(private http: HttpClient) {} /**
	 * Get the comments for an article. Auth is optional
	 * @summary Get comments for an article
	 */
	getArticleComments<TData = MultipleCommentsResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	getArticleComments<TData = MultipleCommentsResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getArticleComments<TData = MultipleCommentsResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getArticleComments<TData = MultipleCommentsResponseResponse>(slug: string, options?: HttpClientOptions): Observable<TData> {
		return this.http.get<TData>(`/articles/${slug}/comments`, options);
	}
	/**
	 * Create a comment for an article. Auth is required
	 * @summary Create a comment for an article
	 */
	createArticleComment<TData = SingleCommentResponseResponse>(
		slug: string,
		newCommentRequestBody: NewCommentRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	createArticleComment<TData = SingleCommentResponseResponse>(
		slug: string,
		newCommentRequestBody: NewCommentRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	createArticleComment<TData = SingleCommentResponseResponse>(
		slug: string,
		newCommentRequestBody: NewCommentRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	createArticleComment<TData = SingleCommentResponseResponse>(
		slug: string,
		newCommentRequestBody: NewCommentRequestBody,
		options?: HttpClientOptions,
	): Observable<TData> {
		return this.http.post<TData>(`/articles/${slug}/comments`, newCommentRequestBody, options);
	}
	/**
	 * Delete a comment for an article. Auth is required
	 * @summary Delete a comment for an article
	 */
	deleteArticleComment<TData = EmptyOkResponseResponse>(
		slug: string,
		id: number,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	deleteArticleComment<TData = EmptyOkResponseResponse>(
		slug: string,
		id: number,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	deleteArticleComment<TData = EmptyOkResponseResponse>(
		slug: string,
		id: number,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	deleteArticleComment<TData = EmptyOkResponseResponse>(slug: string, id: number, options?: HttpClientOptions): Observable<TData> {
		return this.http.delete<TData>(`/articles/${slug}/comments/${id}`, options);
	}
}

export type GetArticleCommentsClientResult = NonNullable<MultipleCommentsResponseResponse>;
export type CreateArticleCommentClientResult = NonNullable<SingleCommentResponseResponse>;
export type DeleteArticleCommentClientResult = NonNullable<EmptyOkResponseResponse>;
