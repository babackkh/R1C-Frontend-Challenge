/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * RealWorld Conduit API
 * Conduit API documentation
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from "@angular/common/http";
import type { HttpResponse as AngularHttpResponse, HttpContext, HttpEvent, HttpHeaders, HttpParams } from "@angular/common/http";

import { Injectable } from "@angular/core";

import type { Observable } from "rxjs";

import type {
	EmptyOkResponseResponse,
	GetArticlesFeedParams,
	GetArticlesParams,
	MultipleArticlesResponseResponse,
	NewArticleRequestBody,
	SingleArticleResponseResponse,
	UpdateArticleRequestBody,
} from "../../model";

type HttpClientOptions = {
	headers?:
		| HttpHeaders
		| {
				[header: string]: string | string[];
		  };
	context?: HttpContext;
	observe?: any;
	params?:
		| HttpParams
		| {
				[param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
		  };
	reportProgress?: boolean;
	responseType?: any;
	withCredentials?: boolean;
};

@Injectable({ providedIn: "root" })
export class ArticlesService {
	constructor(private http: HttpClient) {} /**
	 * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
	 * @summary Get recent articles from users you follow
	 */
	getArticlesFeed<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesFeedParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	getArticlesFeed<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesFeedParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getArticlesFeed<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesFeedParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getArticlesFeed<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesFeedParams,
		options?: HttpClientOptions,
	): Observable<TData> {
		return this.http.get<TData>("/articles/feed", {
			...options,
			params: { ...params, ...options?.params },
		});
	}
	/**
	 * Get most recent articles globally. Use query parameters to filter results. Auth is optional
	 * @summary Get recent articles globally
	 */
	getArticles<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	getArticles<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getArticles<TData = MultipleArticlesResponseResponse>(
		params?: GetArticlesParams,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getArticles<TData = MultipleArticlesResponseResponse>(params?: GetArticlesParams, options?: HttpClientOptions): Observable<TData> {
		return this.http.get<TData>("/articles", {
			...options,
			params: { ...params, ...options?.params },
		});
	}
	/**
	 * Create an article. Auth is required
	 * @summary Create an article
	 */
	createArticle<TData = SingleArticleResponseResponse>(
		newArticleRequestBody: NewArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	createArticle<TData = SingleArticleResponseResponse>(
		newArticleRequestBody: NewArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	createArticle<TData = SingleArticleResponseResponse>(
		newArticleRequestBody: NewArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	createArticle<TData = SingleArticleResponseResponse>(
		newArticleRequestBody: NewArticleRequestBody,
		options?: HttpClientOptions,
	): Observable<TData> {
		return this.http.post<TData>("/articles", newArticleRequestBody, options);
	}
	/**
	 * Get an article. Auth not required
	 * @summary Get an article
	 */
	getArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	getArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	getArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	getArticle<TData = SingleArticleResponseResponse>(slug: string, options?: HttpClientOptions): Observable<TData> {
		return this.http.get<TData>(`/articles/${slug}`, options);
	}
	/**
	 * Update an article. Auth is required
	 * @summary Update an article
	 */
	updateArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		updateArticleRequestBody: UpdateArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	updateArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		updateArticleRequestBody: UpdateArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	updateArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		updateArticleRequestBody: UpdateArticleRequestBody,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	updateArticle<TData = SingleArticleResponseResponse>(
		slug: string,
		updateArticleRequestBody: UpdateArticleRequestBody,
		options?: HttpClientOptions,
	): Observable<TData> {
		return this.http.put<TData>(`/articles/${slug}`, updateArticleRequestBody, options);
	}
	/**
	 * Delete an article. Auth is required
	 * @summary Delete an article
	 */
	deleteArticle<TData = EmptyOkResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "body" },
	): Observable<TData>;
	deleteArticle<TData = EmptyOkResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "response" },
	): Observable<AngularHttpResponse<TData>>;
	deleteArticle<TData = EmptyOkResponseResponse>(
		slug: string,
		options?: Omit<HttpClientOptions, "observe"> & { observe?: "events" },
	): Observable<HttpEvent<TData>>;
	deleteArticle<TData = EmptyOkResponseResponse>(slug: string, options?: HttpClientOptions): Observable<TData> {
		return this.http.delete<TData>(`/articles/${slug}`, options);
	}
}

export type GetArticlesFeedClientResult = NonNullable<MultipleArticlesResponseResponse>;
export type GetArticlesClientResult = NonNullable<MultipleArticlesResponseResponse>;
export type CreateArticleClientResult = NonNullable<SingleArticleResponseResponse>;
export type GetArticleClientResult = NonNullable<SingleArticleResponseResponse>;
export type UpdateArticleClientResult = NonNullable<SingleArticleResponseResponse>;
export type DeleteArticleClientResult = NonNullable<EmptyOkResponseResponse>;
